<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="3a722bcf-7cb4-4326-adec-396c92fd761c" name="Default Changelist" comment="">
      <change afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/augmenter/core.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/augmenter/core.clj" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="ProjectId" id="1d5teLYsqe72PYnu4I2NQJe2NSh" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showExcludedFiles" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="aspect.path.notification.shown" value="true" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/../matching-brackets" />
  </component>
  <component name="ReplState" timestamp="1592029120444">{:repl-history {:ide [], :local [{:command &quot;(get (last (first vectorized)) :input)&quot;, :offset 38, :ns &quot;augmenter.core&quot;} {:command &quot;(get (last (nth vectorized 1)) :input)&quot;, :offset 38, :ns &quot;augmenter.core&quot;} {:command &quot;(into [] (first (nth vectorized 2)))&quot;, :offset 36, :ns &quot;augmenter.core&quot;} {:command &quot;(contains? [1 2 3 4] 4)&quot;, :offset 23, :ns &quot;augmenter.core&quot;} {:command &quot;(contains? (get (last (nth vectorized 3)) :input) :f2)&quot;, :offset 54, :ns &quot;augmenter.core&quot;} {:command &quot;(some #(= (first (nth vectorized 2))) (get (last (nth vectorized 3)) :input))&quot;, :offset 77, :ns &quot;augmenter.core&quot;} {:command &quot;(reduce (fn [a b] (+ a b)) [1 2 3 4 5])&quot;, :offset 39, :ns &quot;augmenter.core&quot;} {:command &quot;(reduce (fn [a b] (* a b)) [1 2 3 4 5])&quot;, :offset 39, :ns &quot;augmenter.core&quot;} {:command &quot;(vector (first (nth vectorized i)))&quot;, :offset 35, :ns &quot;augmenter.core&quot;} {:command &quot;(reduce (fn [i] (vector (first (nth vectorized i)))) vectorized)&quot;, :offset 64, :ns &quot;augmenter.core&quot;} {:command &quot;(reduce (fn [i] (println(vector (first (nth vectorized i))))) vectorized)&quot;, :offset 73, :ns &quot;augmenter.core&quot;} {:command &quot;(reduce (fn [i] (println(vector (first i)))) vectorized)&quot;, :offset 56, :ns &quot;augmenter.core&quot;} {:command &quot;(reduce (fn [i j] (println(vector (first i)))) vectorized)&quot;, :offset 58, :ns &quot;augmenter.core&quot;} {:command &quot;(reduce (fn [i j] (str (first i) (first j)) ) vectorized)&quot;, :offset 57, :ns &quot;augmenter.core&quot;} {:command &quot;(reduce (fn [i j] (str (last i) (last j)) ) vectorized)&quot;, :offset 55, :ns &quot;augmenter.core&quot;} {:command &quot;(reduce (fn [i j] (str i j) ) vectorized)&quot;, :offset 41, :ns &quot;augmenter.core&quot;} {:command &quot;(reduce (fn [i j] (str (first i) \&quot; ||| \&quot; j) ) vectorized)&quot;, :offset 57, :ns &quot;augmenter.core&quot;} {:command &quot;(reduce (fn [i j] (str (nth i 1) \&quot; ||| \&quot; j) ) vectorized)&quot;, :offset 57, :ns &quot;augmenter.core&quot;} {:command &quot;(reduce (fn [i j] (str i \&quot; ||| \&quot; j) ) vectorized)&quot;, :offset 49, :ns &quot;augmenter.core&quot;} {:command &quot;(reduce (fn [a b] (str a \&quot;  \&quot; b)) [10 20 30 40 50])&quot;, :offset 51, :ns &quot;augmenter.core&quot;} {:command &quot;(reduce (fn [a b] (str (first a) \&quot;  \&quot; b)) [10 20 30 40 50])&quot;, :offset 59, :ns &quot;augmenter.core&quot;} {:command &quot;(reduce (fn [a b] (str (first a) \&quot;  \&quot; b)) [{:a {\&quot;aaa\&quot;} :b {\&quot;bbb\&quot;} :c {\&quot;ccc\&quot;}}])&quot;, :offset 79, :ns &quot;augmenter.core&quot;} {:command &quot;(reduce (fn [a b] (str (first a) \&quot;  \&quot; b)) [{:a {\&quot;aaa\&quot;} :b {\&quot;bbb\&quot;} :c {\&quot;ccc\&quot;}} :k {\&quot;kkk\&quot;}])&quot;, :offset 90, :ns &quot;augmenter.core&quot;} {:command &quot;(reduce (fn [a b] (str a \&quot;  \&quot; b)) [{:a {\&quot;aaa\&quot;} :b {\&quot;bbb\&quot;} :c {\&quot;ccc\&quot;}} :k {\&quot;kkk\&quot;}])&quot;, :offset 82, :ns &quot;augmenter.core&quot;} {:command &quot;(apply map vector [[:a :b :c]\n                   [:d :e :f]\n                   [:g :h :i]])&quot;, :offset 91, :ns &quot;augmenter.core&quot;} {:command &quot;(apply vector [[:a :b :c]\n                   [:d :e :f]\n                   [:g :h :i]])&quot;, :offset 87, :ns &quot;augmenter.core&quot;} {:command &quot;(reduce (fn [a b] (str a \&quot;  \&quot; b)) [{:a {\&quot;aaa\&quot; \&quot;aa\&quot;} :b {\&quot;bbb\&quot; \&quot;bb\&quot;} :c {\&quot;ccc\&quot; \&quot;cc\&quot;}} :k {\&quot;kkk\&quot; \&quot;kk\&quot;}])&quot;, :offset 102, :ns &quot;augmenter.core&quot;} {:command &quot;(reduce (fn [[a b]] (str a \&quot;  \&quot; b)) [{:a {\&quot;aaa\&quot; \&quot;aa\&quot;} :b {\&quot;bbb\&quot; \&quot;bb\&quot;} :c {\&quot;ccc\&quot; \&quot;cc\&quot;}} :k {\&quot;kkk\&quot; \&quot;kk\&quot;}])\n&quot;, :offset 105, :ns &quot;augmenter.core&quot;} {:command &quot;(map #(vec (+ % 1)) [1 2 3 4 5])&quot;, :offset 32, :ns &quot;augmenter.core&quot;} {:command &quot;(map #(vector (+ % 1)) [1 2 3 4 5])&quot;, :offset 35, :ns &quot;augmenter.core&quot;} {:command &quot;(map #(into [] (+ % 1)) [1 2 3 4 5])&quot;, :offset 36, :ns &quot;augmenter.core&quot;} {:command &quot;(reduce #(into [] (+ % 1)) [1 2 3 4 5])&quot;, :offset 39, :ns &quot;augmenter.core&quot;} {:command &quot;(reduce #(+ % 1) [1 2 3 4 5])&quot;, :offset 29, :ns &quot;augmenter.core&quot;} {:command &quot;(map #(+ % 1) [1 2 3 4 5])&quot;, :offset 26, :ns &quot;augmenter.core&quot;} {:command &quot;(map #(+ %1 %2 1) [1 2 3 4 5])&quot;, :offset 30, :ns &quot;augmenter.core&quot;} {:command &quot;(reduce #(+ %1 %2 1) [1 2 3 4 5])\n&quot;, :offset 34, :ns &quot;augmenter.core&quot;} {:command &quot;(comp #{2 3} last)&quot;, :offset 18, :ns &quot;augmenter.core&quot;} {:command &quot;(last #{2 3})&quot;, :offset 13, :ns &quot;augmenter.core&quot;} {:command &quot;(map #(apply max %) [[1 2 3][4 5 6][7 8 9]])&quot;, :offset 44, :ns &quot;augmenter.core&quot;} {:command &quot;(apply #(map max %) [[1 2 3][4 5 6][7 8 9]])&quot;, :offset 44, :ns &quot;augmenter.core&quot;} {:command &quot;(clojure.pprint input)&quot;, :offset 22, :ns &quot;augmenter.core&quot;} {:command &quot;(into [] (map vec (partition 2(reduce into [] input))))&quot;, :offset 55, :ns &quot;augmenter.core&quot;} {:command &quot;(defn bubble [ys x]\n  (if-let [y (last ys)]\n    (if (&gt; y x)\n      (conj (pop ys) x y)\n      (conj ys x))\n    [x]))\n&quot;, :offset 115, :ns &quot;augmenter.core&quot;} {:command &quot;(defn bubble-sort [xs]\n  (let [ys (reduce bubble [] xs)]\n    (if (= xs ys)\n      xs\n      (recur ys))))&quot;, :offset 103, :ns &quot;augmenter.core&quot;} {:command &quot;(vector (first (nth vectorized 2)))&quot;, :offset 35, :ns &quot;augmenter.core&quot;} {:command &quot;(some #(= (first (nth vectorized 2)) %) (get (last (nth vectorized 3)) :input))&quot;, :offset 79, :ns &quot;augmenter.core&quot;} {:command &quot;(defn bubble [one two]\n  (if-let [oneLast (last one)]\n    (if (&gt; oneLast two)\n      (conj (pop one) two oneLast)\n      (conj one two))\n    [two]))&quot;, :offset 146, :ns &quot;augmenter.core&quot;} {:command &quot;(bubble-sort [3 2 1])&quot;, :offset 21, :ns &quot;augmenter.core&quot;} {:command &quot;(some #(= 1 %) (1 2 3))&quot;, :offset 23, :ns &quot;augmenter.core&quot;} {:command &quot;(some #(= 1 %) [1 2 3])&quot;, :offset 23, :ns &quot;augmenter.core&quot;} {:command &quot;(.contains [1 2 3] 1)&quot;, :offset 21, :ns &quot;augmenter.core&quot;} {:command &quot;(if (.contains [1 2 3] 1)\n  true\n  false)&quot;, :offset 41, :ns &quot;augmenter.core&quot;} {:command &quot;(if (.contains [1 2 3] 10)\n  true\n  false)&quot;, :offset 42, :ns &quot;augmenter.core&quot;} {:command &quot;(defn bubble [one two]\n  (if-let [oneLast (last one)]\n    (if (some (# = (first oneLast)) (get (last two) :input ))\n      (conj (pop one) two oneLast)\n      (conj one two))\n    [two]))&quot;, :offset 184, :ns &quot;augmenter.core&quot;} {:command &quot;(defn bubble [one two]\n  (if-let [oneLast (last one)]\n    (if (some (# = % (first oneLast)) (get (last two) :input ))\n      (conj (pop one) two oneLast)\n      (conj one two))\n    [two]))&quot;, :offset 186, :ns &quot;augmenter.core&quot;} {:command &quot;(get (last (nth vectorized 3)) :input)&quot;, :offset 38, :ns &quot;augmenter.core&quot;} {:command &quot;(defn bubble [one two]\n  (if-let [oneLast (last one)]\n    (if-not (some #(= % (first oneLast)) (get (last two) :input))\n      (conj (pop one) two oneLast)\n      (conj one two))\n    [two]))&quot;, :offset 188, :ns &quot;augmenter.core&quot;} {:command &quot;(defn inp []\n  (println \&quot;Input map\&quot;)\n  (let [input (read)]\n    input))&quot;, :offset 70, :ns &quot;augmenter.core&quot;} {:command &quot;(println input)&quot;, :offset 15, :ns &quot;augmenter.core&quot;} {:command &quot;(def vectorized (into [] (map vec (partition 2 (reduce into [] input))))) ;;turns maps into vector\n&quot;, :offset 99, :ns &quot;augmenter.core&quot;} {:command &quot;(into [] (map vec (partition 2 (reduce into [] input))))&quot;, :offset 56, :ns &quot;augmenter.core&quot;} {:command &quot;(defn bubble [one two]\n  (if-let [oneLast (last one)]\n    (if (some #(= % (first two)) (get oneLast :input))\n      (conj (pop one) two oneLast)\n      (conj one two))\n    [two]))&quot;, :offset 177, :ns &quot;augmenter.core&quot;} {:command &quot;(get (last (nth vectorized 3)) :input)\n&quot;, :offset 39, :ns &quot;augmenter.core&quot;} {:command &quot;(get (last (nth vectorized 0)) :input)&quot;, :offset 38, :ns &quot;augmenter.core&quot;} {:command &quot;(get (last (nth vectorized 0)) :input)\n&quot;, :offset 39, :ns &quot;augmenter.core&quot;} {:command &quot;(defn bubble [one two]\n  (if-let [oneLast (last one)]\n    (if (some #(= % (first oneLast)) (get (last two) :input))\n      (conj (pop one) two oneLast)\n      (conj one two))\n    [two]))&quot;, :offset 184, :ns &quot;augmenter.core&quot;} {:command &quot;(last (nth vectorized 3))&quot;, :offset 25, :ns &quot;augmenter.core&quot;} {:command &quot;(first(last (nth vectorized 3)))&quot;, :offset 32, :ns &quot;augmenter.core&quot;} {:command &quot;(get(last (nth vectorized 3)) :input)&quot;, :offset 37, :ns &quot;augmenter.core&quot;} {:command &quot;(first (nth vectorized 2))&quot;, :offset 26, :ns &quot;augmenter.core&quot;} {:command &quot;(defn bubble-sort [vectorized]\n  (let [sorted (reduce bubble [] vectorized)]\n    (if (= vectorized sorted)\n      vectorized\n      (recur sorted))))\n(bubble-sort vectorized)&quot;, :offset 172, :ns &quot;augmenter.core&quot;} {:command &quot;(defn bubble [one two]\n  (if-let [oneLast (last one)]\n    (if (some #(=(first two) %) (get oneLast :input))\n      (conj (pop one) two one)\n      (conj one two))\n    [two]))&quot;, :offset 172, :ns &quot;augmenter.core&quot;} {:command &quot;(def input (inp)) &quot;, :offset 18, :ns &quot;augmenter.core&quot;} {:command &quot;(defn bubble [one two]\n  (if-let [oneLast (last one)]\n    (if (some #(=(first two) %) (get (last oneLast) :input))\n      (conj (pop one) two one)\n      (conj one two))\n    [two]))&quot;, :offset 179, :ns &quot;augmenter.core&quot;} {:command &quot;(def input (inp))&quot;, :offset 17, :ns &quot;augmenter.core&quot;} {:command &quot;(def vectorized (into [] (map vec (partition 2 (reduce into [] input)))))\n&quot;, :offset 74, :ns &quot;augmenter.core&quot;} {:command &quot;(conj [1 2 3] 3)&quot;, :offset 16, :ns &quot;augmenter.core&quot;} {:command &quot;(conj [1 2 3] [3])&quot;, :offset 18, :ns &quot;augmenter.core&quot;} {:command &quot;(conj [1 2 3] (seq [3]))&quot;, :offset 24, :ns &quot;augmenter.core&quot;} {:command &quot;(conj [1 2 3] (apply seq [3]))&quot;, :offset 30, :ns &quot;augmenter.core&quot;} {:command &quot;(conj [1 2 3] (apply first [3 4]))&quot;, :offset 34, :ns &quot;augmenter.core&quot;} {:command &quot;(conj [1 2 3] (apply first [[3 4]]))&quot;, :offset 36, :ns &quot;augmenter.core&quot;} {:command &quot;(conj [1 2 3] ( first [3 ]))&quot;, :offset 28, :ns &quot;augmenter.core&quot;} {:command &quot;(conj [1 2 3] ( first [3 4]))&quot;, :offset 29, :ns &quot;augmenter.core&quot;} {:command &quot;(into [1 2 3] [4])&quot;, :offset 18, :ns &quot;augmenter.core&quot;} {:command &quot;(into [1 2 3] [4 5])&quot;, :offset 20, :ns &quot;augmenter.core&quot;} {:command &quot;(defn bubble [one two]\n  (if-let [oneLast (last one)]\n    (if (some #(=(first two) %) (get (last oneLast) :input))\n      (into (pop one) two one)\n      (into one two))\n    [two]))&quot;, :offset 179, :ns &quot;augmenter.core&quot;} {:command &quot;(apply conj [1 2 3] [4])&quot;, :offset 24, :ns &quot;augmenter.core&quot;} {:command &quot;(defn bubble [one two]\n  (if-let [oneLast (last one)]\n    (if (some #(=(first two) %) (get (last oneLast) :input))\n      (conj (pop one) two one)\n      (conj  one two))\n    [two]))&quot;, :offset 180, :ns &quot;augmenter.core&quot;} {:command &quot;(apply conj [1 2 3] [4])\n&quot;, :offset 25, :ns &quot;augmenter.core&quot;} {:command &quot;(into [1 2 3] [4 5])\n&quot;, :offset 21, :ns &quot;augmenter.core&quot;} {:command &quot;(conj [1 2 3] [4 5])&quot;, :offset 20, :ns &quot;augmenter.core&quot;} {:command &quot;(defn bubble [one two]\n  (if-let [oneLast (last one)]\n    (if (some #(=(first two) %) (get (last oneLast) :input))\n      (apply conj (pop one) two one)\n      (conj  one two))\n    [two]))&quot;, :offset 186, :ns &quot;augmenter.core&quot;} {:command &quot;(defn bubble [one two]\n  (if-let [oneLast (last one)]\n    (if (some #(=(first two) %) (get (last oneLast) :input))\n      (apply conj (pop one) two one)\n      (apply conj  one two))\n    [two]))&quot;, :offset 192, :ns &quot;augmenter.core&quot;} {:command &quot;(defn bubble [one two]\n  (if-let [oneLast (last one)]\n    (if (some #(=(first two) %) (get (last oneLast) :input))\n      (apply conj (pop one) two one)\n      (apply conj one two))\n    [two]))&quot;, :offset 191, :ns &quot;augmenter.core&quot;} {:command &quot;(apply (conj) [1 2 3] [4])&quot;, :offset 26, :ns &quot;augmenter.core&quot;} {:command &quot;(defn bubble [one two]\n  (if-let [oneLast (last one)]\n    (if (some #(=(first two) %) (get (last oneLast) :input))\n      (apply conj (pop one) two one)\n      (conj one two))\n    [two]))&quot;, :offset 185, :ns &quot;augmenter.core&quot;} {:command &quot;(defn bubble [one two]\n  (if-let [oneLast (last one)]\n    (if (some #(=(first two) %) (get (last oneLast) :input))\n      (apply conj (pop one) two one)\n      (conj (pop one) one two))\n    [two]))&quot;, :offset 195, :ns &quot;augmenter.core&quot;} {:command &quot;(defn bubble-sort [vectorized]\n  (let [sorted (reduce bubble [] vectorized)]\n    (if (= vectorized sorted)\n      vectorized\n      (recur sorted))))&quot;, :offset 147, :ns &quot;augmenter.core&quot;} {:command &quot;(bubble-sort vectorized)&quot;, :offset 24, :ns &quot;augmenter.core&quot;}], :remote []}}</component>
  <component name="RunManager">
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration name="augment" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="augmenter" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="3a722bcf-7cb4-4326-adec-396c92fd761c" name="Default Changelist" comment="" />
      <created>1591726875351</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1591726875351</updated>
      <workItem from="1591726880319" duration="35159000" />
      <workItem from="1591945466890" duration="7750000" />
      <workItem from="1592023094132" duration="2776000" />
    </task>
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="WindowStateProjectService">
    <state x="414" y="175" key="#com.intellij.execution.impl.EditConfigurationsDialog" timestamp="1591726967067">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state x="414" y="175" key="#com.intellij.execution.impl.EditConfigurationsDialog/0.0.1920.1040@0.0.1920.1040" timestamp="1591726967067" />
    <state x="740" y="275" key="FileChooserDialogImpl" timestamp="1592024065447">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state x="740" y="275" key="FileChooserDialogImpl/0.0.1920.1040@0.0.1920.1040" timestamp="1592024065447" />
    <state x="655" y="344" key="com.intellij.ide.util.TipDialog" timestamp="1591948362834">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state x="655" y="344" key="com.intellij.ide.util.TipDialog/0.0.1920.1040@0.0.1920.1040" timestamp="1591948362834" />
  </component>
</project>